First off, I'm going to need to remember Java app structure - I've been working in JS webapps for a good while. I'll
just follow the Maven structure def and separate some logical groups into packages.

I've already got a good idea of what's going to need to be a class and what can be left as configuration in the DB, so
I'll stub out my classes if for no other reason than to get some organization down where I can see it.

As far as data and configuration are concerned, I could keep everything in .conf, constants, or similar files, but
frankly I'd like to show off that I'm familiar with SQL interaction. Since this is a very light app, I'll spin up
SQLite in-memory and spawn in the necessary data at connection time (which will only tool info at this point, but still,
that's where data like this belongs).

I'm definitely going to want confirmation that I've actually set up the database correctly, so I'll write a test to
check that the connection is being created. Correct data will be checked by the rest of the suite, so I'm not going to
bother with that in the DB connection test.

While I'm at it, I probably want unit tests for the major components I'll be writing, so I'll stub those out as well.
The final integration tests can be written out fully now, since I know their criteria and want to program to them. The
unit tests can have their stubs filled out after I have actual function names and signatures to work with.
Fun fact: GitHub's Copilot AI seems to have found other repos for this project and is filling out my test names and
expected string literals for me. I'm going to avoid using any major code chunks if it tries to suggest them, but I'm
going to use the test names and strings because those are predefined and I don't want to waste time writing them myself.
The strings aren't perfect between lines, but it does know the expected dates, days, and tool codes.

Finally, onto the classes and unit tests. I'll start with the Tools, since that just seems like the most logical place
start. I'll write the unit tests first, and get the class passing those, and do the same with the rest until I'm at a
point where doing the integration testing seems feasible. Once I get past tools, though, the others are likely to be
somewhat more interdependent, so I may skip around while I write them.

Holidays is the first logical unit to get rewrites. I decided I could cut some code duplication by moving some of the
logic into an abstract, instead of a pure interface. I also realized that some holidays we may choose to observe could
be longer than a single day (e.g. Ramadan, with the use of an external API), so I'm going horrendously overboard to be
able to handle that.
