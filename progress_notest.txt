First off, I'm going to need to remember Java app structure - I've been working in JS webapps for a good while. I'll
just follow the Maven structure def and separate some logical groups into packages.

I've already got a good idea of what's going to need to be a class and what can be left as configuration in the DB, so
I'll stub out my classes if for no other reason than to get some organization down where I can see it.

As far as data and configuration are concerned, I could keep everything in .conf, constants, or similar files, but
frankly I'd like to show the way I'm familiar with Java-SQL interaction. Since this is a very light app, I'll spin up
SQLite in-memory and spawn in the necessary data at connection time (which will only tool info at this point, but still,
that's where data like this belongs).

I'm definitely going to want confirmation that I've actually set up the database correctly, so I'll write a test to
check that the connection is being created. Correct data will be checked by the rest of the suite, so I'm not going to
bother with that in the DB connection test.

While I'm at it, I probably want unit tests for the major components I'll be writing, so I'll stub those out as well.
The final integration tests can be written out fully now, since I know their criteria and want to program to them. The
unit tests can have their stubs filled out after I have actual function names and signatures to work with.
Fun fact: GitHub's Copilot AI seems to have found other repos for this project and is filling out my test names and
expected string literals for me. I'm going to avoid using any major code chunks if it tries to suggest them, but I'm
going to use the test names and strings because those are predefined and I don't want to waste time writing them myself.
The strings aren't perfect between lines, but it does know the expected dates, days, and tool codes.

Finally, onto the classes and unit tests. I'll start with the Tools, since that just seems like the most logical place
start. I'll write the unit tests first, and get the class passing those, and do the same with the rest until I'm at a
point where doing the integration testing seems feasible. Once I get past tools, though, the others are likely to be
somewhat more interdependent, so I may skip around while I write them.

Holidays is the first logical unit to get rewrites. I decided I could cut some code duplication by moving some of the
logic into an abstract, instead of a pure interface. I also realized that some daycalculation we may choose to observe could
be longer than a single day (e.g. Ramadan, with the use of an external API), so I'm going a little overboard to be
able to handle that.

Once again, date logic is the part that takes me the most time. I'm trying to figure out whether there's a way faster
than O(n) to find weekday/weekend count for the rental period. I'm hoping there is, but sitting here puzzling it out
is a waste of time when Google exists.
All hail SO: https://stackoverflow.com/questions/4600034/calculate-number-of-weekdays-between-two-dates-in-java

I was right that I would be bouncing between classes until everything was done - and now it's all done at once! Tests
are now succeeding (and my small errors with my in some of the tests defs have been fixed), so I'm going to call this
good here for the day, and review it tomorrow when I'm fresh. As it currently stands, though, I'm quite pleased.

Thought about it some more and realized I could probably move the weekday calculation somewhere that it could be tested
independently, and I should probably set a test or two up for that. With that done, I'll call this ready for review.

In the process of moving weekday calculations, I noticed that I wasn't being incredibly consistent with end date
inclusivity, so I've normalized that. I also realized that recalculating this whenever the tool is fetched from the DB
is not only wasteful, it would result in a lack of historical data, so I'm going to add the pricing and tool info fields
to the agreement table. It'll take more space, but it'll actually be accurate (I cannot believe I didn't initially think
of the fact that prices could change over time, or recognized holidays for that matter.) I'll also unlink the tool
itself from rental agreements, since that's not necessary if I'm copying the data over for historical purposes. This
also means I can just use the tool's code as a primary key, which is a lot easier to work with.

Big win for TDD: weekday counter had a bug after I moved it and explicitly tracked inclusive vs exclusive. Fortunately
it was caught by the proofs (likely hidden by some off-by-one caused by the inclusive/exclusive switch), and I was able
to isolate it thanks to being able to test weekday counts independently.

I now feel much more confident in this solution, now that I've got all the moving parts separated and tested
independently, as well as confirming that it actually meets what would be required of an actual app with regards to
historical data. I'm going to call this done and ready for review.
